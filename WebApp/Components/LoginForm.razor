@using WebApp.DTOs.Auth
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IHttpClientFactory HttpClientFactory

<h3>🔐 Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="login-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="loginModel.Username" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
    private LoginRequest loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BackendAPI");
            var response = await client.PostAsJsonAsync("/api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid credentials.";
            }
        }
        catch
        {
            errorMessage = "Login failed due to server error.";
        }
    }
}
